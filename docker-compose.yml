---
version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.0
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 | grep 'Mode: standalone'"] # Health check command
      interval: 30s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1 # Unique ID for this ZooKeeper server
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
      # ZOOKEEPER_4LW_COMMANDS_WHITELIST: '*'
      # ZOOKEEPER_4LW_COMMANDS_WHITELIST: stat, ruok, conf, isro
    volumes:
    - ./data/zookeeper/data:/var/lib/zookeeper/data:rw
    - ./data/zookeeper/logs/:/var/lib/zookeeper/log:rw

  broker0:
    image: confluentinc/cp-kafka:7.1.0
    hostname: broker0
    container_name: broker0
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://broker0:29092,EXTERNAL://broker0:9092
      # KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker0:29092,EXTERNAL://ec2-13-232-130-73.ap-south-1.compute.amazonaws.com:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker0:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: broker0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:6081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker0:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
    - ./data/broker0/data:/var/lib/kafka/data
    - ./data/broker0/logs/:/tmp/kafka-logs/

  broker1:
    image: confluentinc/cp-kafka:7.1.0
    hostname: broker1
    container_name: broker1
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - 9093:9093
      - 9102:9101
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://broker1:29093,EXTERNAL://broker1:9093
      # KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:29093,EXTERNAL://ec2-13-232-130-73.ap-south-1.compute.amazonaws.com:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:29093,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: broker1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:6081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker1:29093
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
    - ./data/broker1/data:/var/lib/kafka/data
    - ./data/broker1/logs/:/tmp/kafka-logs/

  broker2:
    image: confluentinc/cp-kafka:7.1.0
    hostname: broker2
    container_name: broker2
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - 9094:9094
      - 9103:9101
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://broker2:29094,EXTERNAL://broker2:9094
      # KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker2:29094,EXTERNAL://ec2-13-232-130-73.ap-south-1.compute.amazonaws.com:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker2:29094,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: broker2
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:6081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker2:29094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
    - ./data/broker2/data:/var/lib/kafka/data
    - ./data/broker2/logs/:/tmp/kafka-logs/

  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker0
      - broker1
      - broker2
    ports:
      - 6081:6081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker0:29092,broker1:29093,broker2:29094'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:6081
      # SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper0:2181
      # SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      # SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      # SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

  connect:
    image: cnfldemos/kafka-connect-datagen:0.5.0-6.2.0
    hostname: connect
    container_name: connect
    restart: unless-stopped
    depends_on:
      - zookeeper
      - broker0
      - broker1
      - broker2
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker0:29092,broker1:29093,broker2:29094'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:6081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.1.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.1.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    restart: unless-stopped
    depends_on:
      - zookeeper
      - broker0
      - broker1
      - broker2
      - connect
    ports:
      - 8088:8088
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker0:29092,broker1:29093,broker2:29094"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:6081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.1.0
    container_name: ksqldb-cli
    restart: unless-stopped
    depends_on:
      - zookeeper
      - broker0
      - broker1
      - broker2
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.1.0
    hostname: ksql-datagen
    container_name: ksql-datagen
    restart: unless-stopped
    depends_on:
      - zookeeper
      - ksqldb-server
      - broker0
      - broker1
      - broker2
      - schema-registry
      - connect
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker0:29092,broker1:29093,broker2:29094 1 40 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 6081 40 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 11 && \
                       tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      STREAMS_BOOTSTRAP_SERVERS: broker0:29092,broker1:29093,broker2:29094
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 6081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.1.0
    restart: unless-stopped
    depends_on:
      - zookeeper
      - broker0
      - broker1
      - broker2
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker0:29092,broker1:29093,broker2:29094'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:6081'

  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker0:29092,broker1:29093,broker2:29094"
              schema-registry:
                url: "http://schema-registry:6081"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - broker0
      - broker1
      - broker2
      - schema-registry
      - connect


  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   restart: unless-stopped
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - zookeeper
  #     - broker0
  #     - broker1
  #     - broker2
  #     - schema-registry
  #     - connect
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: BCware-Kafka-Cluster
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker0:29092,broker1:29093,broker2:29094
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #     KAFKA_CLUSTERS_0_JMXPORT: 9101
  #     KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:6081
  #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
  #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083

# mkdir -p data/zookeeper/data
# mkdir -p data/zookeeper/logs
# mkdir -p data/broker0/data
# mkdir -p data/broker1/data
# mkdir -p data/broker0/logs
# mkdir -p data/broker1/logs
# mkdir -p data/zookeeper/{data,logs}
# mkdir -p data/broker0/{data,logs}
# mkdir -p data/broker1/{data,logs}
# mkdir -p data/broker2/{data,logs}

# chown -R 1000:1000 data/zookeeper/data
# chown -R 1000:1000 data/zookeeper/logs
# chown -R 1000:1000 data/broker0/data
# chown -R 1000:1000 data/broker1/data
# chown -R 1000:1000 data/broker0/logs
# chown -R 1000:1000 data/broker1/logs

# To create topic use the below command
# docker-compose -f kafka-docker-compose.yml exec broker0 kafka-topics --create --topic foo --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server broker0:9092,broker1:9093
